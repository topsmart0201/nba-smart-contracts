// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../scripts/read_currentSeries.cdc (230B)
// ../../../scripts/read_totalSupply.cdc (258B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _read_currentseriesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x3d\x0e\x83\x30\x0c\x05\xe0\x3d\xa7\x78\x23\x2c\x05\x95\xad\x37\xe8\x0c\x3d\x40\x08\xa6\x44\x22\x4e\xe4\x38\x52\xa5\xaa\x77\xaf\xf8\xe9\x56\x8f\xb6\xdf\xf7\x7c\x48\x51\x14\x43\x4c\xfd\x12\x15\xb3\xc4\x80\xf6\xd5\x76\xc6\x34\x0d\x86\xc5\x67\x64\x27\x3e\x29\x84\xec\x94\xa1\x0b\xc1\x15\x11\x62\x45\x26\xf1\x94\x8f\xc8\xb6\xff\x19\x2e\xb2\x8a\x75\x0a\xcb\x13\x36\x46\x48\x8b\xf0\x16\xb6\x0a\x2e\x61\x24\x81\xc6\xc3\xb2\xeb\x4a\x62\x52\x19\x31\x17\x46\xb0\x9e\xab\xfa\x86\xc7\x9d\xb5\xbb\xe2\x6d\x00\x60\x8d\xcf\xea\xb4\x2f\x67\x77\xbf\x57\xd7\xfb\xf9\xd0\xf1\xf7\xc3\x7c\xcc\x3e\xdf\x00\x00\x00\xff\xff\x77\x22\xd3\x4c\xe6\x00\x00\x00"

func read_currentseriesCdcBytes() ([]byte, error) {
	return bindataRead(
		_read_currentseriesCdc,
		"read_currentSeries.cdc",
	)
}

func read_currentseriesCdc() (*asset, error) {
	bytes, err := read_currentseriesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "read_currentSeries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x7d, 0x44, 0xc7, 0xa0, 0x95, 0x92, 0x32, 0xf1, 0x2f, 0xfd, 0xc4, 0xc6, 0xd0, 0x96, 0x25, 0xc3, 0xd, 0x43, 0x2f, 0xb4, 0xb1, 0x9a, 0x20, 0x1e, 0x91, 0x84, 0xec, 0x5, 0xde, 0xac, 0x89}}
	return a, nil
}

var _read_totalsupplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x3d\x4e\x04\x31\x0c\xc5\xf1\x3e\xa7\x78\xe5\x6e\xc3\xae\x04\xa2\xe0\x06\xd4\x33\x1c\xc0\x93\xf1\x90\x48\x89\x1d\x79\x1c\x04\x42\xdc\x1d\xcd\x07\x1d\x6e\xff\xf2\xef\xe5\xda\xd4\x1c\xa3\xb6\x21\xa9\x63\x31\xad\xb8\x7f\xde\x1f\x43\xb8\xdd\x30\xa6\xbc\x62\x8d\x96\x9b\xc3\x98\xe6\x15\x9e\x18\xb1\x9b\xb1\x38\xa4\xd7\x89\x0d\xba\xa0\x6a\x65\xf1\xad\x92\x23\xd1\x07\x63\x62\x16\xd4\x2c\xce\xf3\x06\xed\xec\xf6\xfb\xb7\x13\x55\xdc\x28\x3a\x48\x66\x18\x7b\x37\x39\xdf\x4f\xd5\xf5\xd8\xa2\x52\xd8\x42\xeb\x13\x96\x2e\xa8\x94\xe5\x72\x7d\xc1\xdb\xab\xf8\xf3\x13\xbe\x03\x00\x14\x7d\xbf\x9c\xee\x83\xab\x53\x19\x7a\x6b\xe5\xeb\xba\xc7\xc3\xc6\x3f\x3d\xfc\x84\xfd\x7e\x03\x00\x00\xff\xff\x0f\x27\xe4\x25\x02\x01\x00\x00"

func read_totalsupplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_read_totalsupplyCdc,
		"read_totalSupply.cdc",
	)
}

func read_totalsupplyCdc() (*asset, error) {
	bytes, err := read_totalsupplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "read_totalSupply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xec, 0x3, 0x79, 0x19, 0x84, 0x56, 0xce, 0x47, 0x9e, 0xcc, 0xa1, 0x36, 0xcd, 0x1, 0xd9, 0xea, 0x75, 0xf4, 0x14, 0x78, 0xc2, 0xf5, 0x7a, 0x17, 0x65, 0x8, 0xc1, 0xb3, 0xa, 0xda, 0x16}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"read_currentSeries.cdc": read_currentseriesCdc,
	"read_totalSupply.cdc":   read_totalsupplyCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"read_currentSeries.cdc": &bintree{read_currentseriesCdc, map[string]*bintree{}},
	"read_totalSupply.cdc":   &bintree{read_totalsupplyCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
